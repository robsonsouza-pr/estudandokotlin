Kotlin

----------------------------
Variáveis
----------------------------

Um tipo primitivo contém métodos.

2.plus(4) // resultado 6
5.div(5) // resultado 1

declarações de  variáveis em Kotlin:

val é imutável
var é mutável

Exemplo:
val nome = "Robson"
nome - "Robson Souza" // erro!!!

var nome2 = "Robson"
nome2 = "Robson Souza" // ok, é permitido

Kotin dificulta NullPointerException

var nome = null // ok

var nome3 = "Robson"
nome3 = null //erro, não pode

Para criar listas que podem receber null
var list: List<Int?> = listOf(null, null) // ok
var list2: List<Int>? = null // ok

O operador Elvis ?: é um tipo de operador ternário que verifica um valor é nulo.
Ex:

var numero: Int? = null
numero?.inc() ?: 0 //se for nulo retorna 0

----------------------------
String
----------------------------
Utilizar strings é comum, como em Java.

"Olá mundo!"

é possível concatenar Strings

"Olá " + "mundo!"

O operador $ consegue unir uma String com o valor de uma varíavel
var idade: Int? = 34
"Olá, tenho $idade anos de idade" // Isso se chama String Template $

Também dá pra somar duas variáveis
var n1: Int? = 1
var n2: Int? = 1

"A soma de n1 e n2 é: ${n1+n2}"

------------------------
Operadores
------------------------
== igualdade
!= diferença

-------------------------
Estrutura condicional
-------------------------
if(1>2) 
	println("Daí sim!")
else
	println("Daí não!")
	

É possível definir intervalos de valores:

var numero: Int?  = 10
if (numero in 1...50) 
	println("No intervalor entre 1 e 50")
else 
	println("Deu ruim!")

O operador When é parecido com o If, porém, demonstra algumas diferenças de sintaxe

var welcomeMessage = "Hello and welcome to Kotlin"
when (welcomeMessage.length) {
   0 -> println("Nothing to say?")
   in 1..50 -> println("Perfect")
   else -> println("Too long!")
}

Exercício

var nomeDoPeixe: String? = "Nemo"
when(nomedoPeixe.length){
	0-> println("Error message")
	in 3..12 -> println("Good name")
	else -> println("Ok")
}

------------------
-- Arrays, listas e for
-----------------
cria-se arrays com arraysOf()
cria-se listas mutáveis e imutáveis.

Ex:

var list3 : MutableList<Int> = mutableListOf()
for (i in 0..100 step 7) list3.add(i)
print(list3)
[0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98]
OR

for (i in 0..100 step 7) println(i.toString() + " - ")


---------------

--------------
-- Funções
--------------

Similar ao java, funções são métodos.

Java:

public static void main (String[] args){}

Kotlin:
func main(args: Array<String>){}

É possível adicionar parâmetros com valor default, porém, o ideal é indicar todos os obrigatórios primeiro (os sem valor default) e depois os opcionais
Ex:

func devoMultiplocar (numero: Int, devo: Boolean =  false){

}

No caso acima, não é necessário passar como parâmetro o valor de "devo", pois se não passar ele será "false"

Os tipos de retorno são colocados após o nome e os parâmetros
Ex:
func soma(num1: Int, num2: Int): Int{
  return num1+num2
}

É possível declarar funções de uma linha só

func isMuitoQuente(temperatura: Int) = temperatura > 30

Em muitos casos, é possível usar o when como retorno de um método.


------
-- Filtros
------

Escrever sobre filtros

-----------
-- Lambdas
----------

Ainda é um pouco nebuloso pra mim, mas dá pra inserir lambdas em variáveis e elas são executadas toda vez que a variável é utilizada.

Ex:

var sorteia = {random()}

println(sorteia())



Ainda está muito nebuloso, mas ok. Aos poucos vai dar certo.

